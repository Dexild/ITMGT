{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the circumference of the Circle:93\n",
      "688.2639419404126\n"
     ]
    }
   ],
   "source": [
    "circumference = float(input(\"Enter the circumference of the Circle:\"))\n",
    "radius = (circumference / (2 * 3.1416))\n",
    "area = (radius**2) * 3.1416\n",
    "print(area)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a 5 character string:potatos\n",
      "t a t o p\n"
     ]
    }
   ],
   "source": [
    "entered_string = input(\"Enter a 5 character string:\")\n",
    "v = lambda x: x[0:1]\n",
    "w = lambda x: x[1:2]\n",
    "x = lambda x: x[2:3]\n",
    "y = lambda x: x[3:4]\n",
    "z = lambda x: x[4:5]\n",
    "z(entered_string)\n",
    "y(entered_string)\n",
    "x(entered_string)\n",
    "w(entered_string)\n",
    "v(entered_string)\n",
    "print(z(entered_string),y(entered_string),x(entered_string),w(entered_string),v(entered_string))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter A Number:5\n",
      "Sum of Numbers within the number: 15.0\n"
     ]
    }
   ],
   "source": [
    "def sum_of_numbers(entered_number):\n",
    "    sum = 0\n",
    "    while entered_number > 0:\n",
    "        sum += entered_number\n",
    "        entered_number -=1\n",
    "    return sum\n",
    "\n",
    "entered_number = float(input(\"Enter A Number:\"))\n",
    "final_sum = sum_of_numbers(entered_number)\n",
    "print(\"Sum of Numbers within the number:\",final_sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter A Number:100\n",
      "338350\n",
      "25502500\n",
      "25164150\n"
     ]
    }
   ],
   "source": [
    "sum_of_squared_numbers = 0\n",
    "including_number = (entered_number + 1)\n",
    "for i in range(int(including_number)):\n",
    "    sum_of_squared_numbers = sum_of_squared_numbers + (i ** 2)\n",
    "\n",
    "square_of_sum_of_numbers = 0\n",
    "for i in range(int(including_number)):\n",
    "    square_of_sum_of_numbers += i\n",
    "    final_square_of_sum = square_of_sum_of_numbers ** 2\n",
    "    \n",
    "entered_number = int(input(\"Enter A Number:\"))\n",
    "including_number = (entered_number + 1)\n",
    "final_sum = sum_of_squared_numbers\n",
    "final_squared_sum = final_square_of_sum\n",
    "final_answer = final_squared_sum - final_sum\n",
    "print(final_sum)\n",
    "print(final_squared_sum)\n",
    "print(final_answer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "entered_money = int(input(\"Please Enter Money you want changed:\"))\n",
    "print((entered_money//100), \"1 Peso/s\")\n",
    "entered_money = (entered_money%100)\n",
    "print((entered_money//25), \"25 Cents\")\n",
    "entered_money = (entered_money%100)\n",
    "print((entered_money//10), \"10 Cents\")\n",
    "entered_money = (entered_money%100)\n",
    "print((entered_money//5), \"5 Cents\")\n",
    "entered_money = (entered_money%100)\n",
    "print((entered_money//1), \"1 Cent/s\")\n",
    "entered_money = (entered_money%100)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
